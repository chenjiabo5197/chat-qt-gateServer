#pragma once

#include "const.h"
#include <thread>
#include <jdbc/mysql_driver.h>
#include <jdbc/mysql_connection.h>
#include <jdbc/cppconn/prepared_statement.h>
#include <jdbc/cppconn/resultset.h>
#include <jdbc/cppconn/statement.h>
#include <jdbc/cppconn/exception.h>

class SqlConnection {
public:
	SqlConnection(sql::Connection* conn, int64_t lasttime) :_conn(conn), _last_oper_time(lasttime) {}
	std::unique_ptr<sql::Connection> _conn;
	int64_t _last_oper_time;
};

class MySqlPool {
public:
	MySqlPool(const std::string& url, const std::string& user, const std::string& pass, const std::string& schema, int poolSize)
		: url_(url), user_(user), pass_(pass), schema_(schema), poolSize_(poolSize), b_stop_(false) {
		try {
			for (int i = 0; i < poolSize_; ++i) {
				sql::mysql::MySQL_Driver* driver = sql::mysql::get_mysql_driver_instance();
				auto* con = driver->connect(url_, user_, pass_);
				con->setSchema(schema_);
				// 获取当前时间戳
				auto currentTime = std::chrono::system_clock::now().time_since_epoch();
				// 将时间戳转换为秒
				long long timestamp = std::chrono::duration_cast<std::chrono::seconds>(currentTime).count();
				pool_.push(std::make_unique<SqlConnection>(con, timestamp));
			}

			_check_thread = std::thread([this]() {
				while (!b_stop_) {
					// 线程池没有停止的情况下每隔60s检测一下
					checkConnection();
					std::this_thread::sleep_for(std::chrono::seconds(60));
				}
				});
			// 将线程与当前线程对象分离，使其在后台运行而不再与原有的 std::thread 对象绑定。当调用 detach() 后，
			// 线程将继续在后台执行，但无法再被控制（例如，不能再 join()，也无法获取其返回值或异常）
			_check_thread.detach();
		}
		catch (sql::SQLException& e) {
			// 处理异常
			std::cout << "mysql pool init failed, error is " << e.what() << std::endl;
		}
	}

	void checkConnection() {
		// 加锁
		/*
			1、std::unique_lock 对 std::mutex 进行封装，自动处理锁的获取和释放。
			2、当 lock 对象被创建时，它会尝试获取 mutex_ 锁。如果当前没有其他线程持有该锁，lock 会成功获得锁并继续执行代码。
			3、当 lock 对象超出作用域时（即 lock 被销毁时），std::unique_lock 会自动释放 mutex_ 锁，避免了忘记解锁的错误。
		*/
		std::lock_guard<std::mutex> guard(mutex_);
		int poolsize = pool_.size();
		// 获取当前时间戳
		auto currentTime = std::chrono::system_clock::now().time_since_epoch();
		// 将时间戳转换为秒
		long long timestamp = std::chrono::duration_cast<std::chrono::seconds>(currentTime).count();
		for (int i = 0; i < poolsize; i++) {
			auto con = std::move(pool_.front());
			pool_.pop();
			Defer defer([this, &con]() {
				pool_.push(std::move(con));
			});

			// 检测当前时间戳和上次操作的时间戳之差
			if (timestamp - con->_last_oper_time < 5) {
				continue;
			}

			try {
				std::unique_ptr<sql::Statement> stmt(con->_conn->createStatement());
				stmt->executeQuery("SELECT 1");
				con->_last_oper_time = timestamp;
				//std::cout << "execute timer alive query , cur is " << timestamp << std::endl;
			}
			catch (sql::SQLException& e) {
				std::cout << "Error keeping connection alive: " << e.what() << std::endl;
				// 重新创建连接并替换旧的连接
				sql::mysql::MySQL_Driver* driver = sql::mysql::get_mysql_driver_instance();
				auto* newcon = driver->connect(url_, user_, pass_);
				newcon->setSchema(schema_);
				con->_conn.reset(newcon);
				con->_last_oper_time = timestamp;
			}
		}
	}

	std::unique_ptr<SqlConnection> getConnection() {
		std::unique_lock<std::mutex> lock(mutex_);
		// 返回false时，线程挂起，等待notify唤醒
		cond_.wait(lock, [this] {
			if (b_stop_) {
				return true;
			}
			return !pool_.empty(); });
		if (b_stop_) {
			return nullptr;
		}
		std::unique_ptr<SqlConnection> con(std::move(pool_.front()));
		pool_.pop();
		return con;
	}

	void returnConnection(std::unique_ptr<SqlConnection> con) {
		std::unique_lock<std::mutex> lock(mutex_);
		if (b_stop_) {
			return;
		}
		pool_.push(std::move(con));
		cond_.notify_one();
	}

	void Close() {
		b_stop_ = true;
		cond_.notify_all();
	}

	~MySqlPool() {
		std::unique_lock<std::mutex> lock(mutex_);
		while (!pool_.empty()) {
			pool_.pop();
		}
	}

private:
    // 连接mysql的配置
    std::string url_;
    std::string user_;
    std::string pass_;
    // 数据库
    std::string schema_;
    int poolSize_;
    // mysql的连接队列
    std::queue<std::unique_ptr<SqlConnection>> pool_;
    // 防止多线程访问，保证安全性
    std::mutex mutex_;
    // 队列为空时的一个条件变量，让访问的线程挂起与唤醒
    std::condition_variable cond_;
    // 连接池要退出时，置为true
    std::atomic<bool> b_stop_;
    // 连接池的检测线程。每隔固定时间检测一次，长时间未操作时给mysql发请求报告存活状态，防止mysql断开这个连接
    std::thread _check_thread;
};

struct UserInfo {
    std::string name;
    std::string passwd;
    int uid;
    std::string email;
};

class MysqlDao
{
public:
	MysqlDao();
	~MysqlDao();
	int RegUser(const std::string& name, const std::string& email, const std::string& pwd);
	int RegUserTransaction(const std::string& name, const std::string& email, const std::string& pwd, const std::string& icon);
	bool CheckEmail(const std::string& name, const std::string& email);
	bool UpdatePwd(const std::string& name, const std::string& newpwd);
	bool CheckPwd(const std::string& name, const std::string& pwd, UserInfo& userInfo);
	bool TestProcedure(const std::string& email, int& uid, std::string& name);
private:
	std::unique_ptr<MySqlPool> pool_;
};

